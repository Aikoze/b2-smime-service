import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { ensureCertificate } from './auto-fetch-certificate.js';
import { ensureCertificateLdapJS } from './auto-fetch-certificate-ldapjs.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Gestionnaire de certificats avec support Railway
 */
export class CertificateManager {
  constructor() {
    // Utiliser un r√©pertoire persistant si disponible (Railway volume)
    // Sinon utiliser le r√©pertoire local
    this.certDir = process.env.CERT_DIR || path.join(__dirname, 'certificates');
    
    // Cr√©er le r√©pertoire s'il n'existe pas
    if (!fs.existsSync(this.certDir)) {
      fs.mkdirSync(this.certDir, { recursive: true });
      console.log(`üìÅ R√©pertoire certificats cr√©√©: ${this.certDir}`);
    }
    
    // Cache m√©moire pour les certificats
    this.certCache = new Map();
    
    // M√©thode de r√©cup√©ration (ldapjs par d√©faut pour Railway)
    this.useLdapJS = process.env.USE_LDAPJS !== 'false';
  }
  
  /**
   * Obtenir un certificat (depuis cache, fichier ou LDAP)
   */
  async getCertificate(organismeCode) {
    // Normaliser le code
    const fullCode = organismeCode.length === 3 ? `01${organismeCode}` : organismeCode;
    
    // 1. V√©rifier le cache m√©moire
    if (this.certCache.has(fullCode)) {
      console.log(`üíæ Certificat ${fullCode} trouv√© dans le cache`);
      return this.certCache.get(fullCode);
    }
    
    // 2. V√©rifier sur disque
    const certPath = path.join(this.certDir, `${fullCode}.pem`);
    if (fs.existsSync(certPath)) {
      console.log(`üìÑ Certificat ${fullCode} charg√© depuis le disque`);
      const cert = fs.readFileSync(certPath, 'utf8');
      this.certCache.set(fullCode, cert);
      return cert;
    }
    
    // 3. R√©cup√©rer depuis LDAP
    console.log(`üåê R√©cup√©ration LDAP pour ${fullCode}...`);
    try {
      let cert;
      
      if (this.useLdapJS) {
        // Utiliser ldapjs (pure Node.js - recommand√© pour Railway)
        const { ensureCertificateLdapJS } = await import('./auto-fetch-certificate-ldapjs.js');
        cert = await ensureCertificateLdapJS(organismeCode);
      } else {
        // Utiliser ldapsearch (n√©cessite openldap-clients)
        cert = await ensureCertificate(organismeCode);
      }
      
      // Sauvegarder dans le r√©pertoire persistant
      const newCertPath = path.join(this.certDir, `${fullCode}.pem`);
      fs.writeFileSync(newCertPath, cert);
      console.log(`üíæ Certificat ${fullCode} sauvegard√© dans ${this.certDir}`);
      
      // Mettre en cache
      this.certCache.set(fullCode, cert);
      
      return cert;
    } catch (error) {
      throw new Error(`Impossible de r√©cup√©rer le certificat ${fullCode}: ${error.message}`);
    }
  }
  
  /**
   * Charger tous les certificats disponibles au d√©marrage
   */
  loadAvailableCertificates() {
    let loadedCount = 0;
    
    try {
      // Charger depuis le r√©pertoire principal
      const mainDirFiles = fs.readdirSync(__dirname)
        .filter(file => file.endsWith('.pem') && /^\d+\.pem$/.test(file));
      
      // Charger depuis le r√©pertoire des certificats
      let certDirFiles = [];
      if (fs.existsSync(this.certDir)) {
        certDirFiles = fs.readdirSync(this.certDir)
          .filter(file => file.endsWith('.pem') && /^\d+\.pem$/.test(file));
      }
      
      // Combiner les deux listes (sans doublons)
      const allFiles = [...new Set([...mainDirFiles, ...certDirFiles])];
      
      allFiles.forEach(file => {
        const code = file.replace('.pem', '');
        
        // Chercher d'abord dans le r√©pertoire des certificats
        let certPath = path.join(this.certDir, file);
        if (!fs.existsSync(certPath)) {
          certPath = path.join(__dirname, file);
        }
        
        try {
          const cert = fs.readFileSync(certPath, 'utf8');
          this.certCache.set(code, cert);
          process.env[`CPAM_CERT_${code}`] = cert;
          console.log(`‚úÖ Certificat ${code} charg√©`);
          loadedCount++;
        } catch (error) {
          console.error(`‚ùå Erreur chargement ${file}:`, error.message);
        }
      });
    } catch (error) {
      console.error('‚ùå Erreur lecture r√©pertoires:', error.message);
    }
    
    console.log(`üìú ${loadedCount} certificats charg√©s`);
    
    // Copier les certificats du r√©pertoire principal vers le r√©pertoire persistant
    this.syncCertificates();
    
    return loadedCount;
  }
  
  /**
   * Synchroniser les certificats du r√©pertoire principal vers le r√©pertoire persistant
   */
  syncCertificates() {
    if (this.certDir === __dirname) return; // Pas besoin de sync si m√™me r√©pertoire
    
    try {
      const mainDirFiles = fs.readdirSync(__dirname)
        .filter(file => file.endsWith('.pem') && /^\d+\.pem$/.test(file));
      
      mainDirFiles.forEach(file => {
        const srcPath = path.join(__dirname, file);
        const destPath = path.join(this.certDir, file);
        
        if (!fs.existsSync(destPath)) {
          fs.copyFileSync(srcPath, destPath);
          console.log(`üìã Certificat ${file} copi√© vers ${this.certDir}`);
        }
      });
    } catch (error) {
      console.error('‚ö†Ô∏è Erreur sync certificats:', error.message);
    }
  }
  
  /**
   * Obtenir la liste des certificats disponibles
   */
  getAvailableCertificates() {
    return Array.from(this.certCache.keys());
  }
}

// Instance singleton
export const certificateManager = new CertificateManager();