import { ensureCertificateLdapJS } from './auto-fetch-certificate-ldapjs.js';
import fs from 'fs';

/**
 * Script pour pr√©-r√©cup√©rer les certificats les plus courants
 * √âvite les appels LDAP en production
 */
async function fetchAllCertificates() {
  console.log('üì• R√âCUP√âRATION DES CERTIFICATS COURANTS\n');
  
  // Liste des organismes courants
  const organismes = [
    // R√©gime g√©n√©ral (01)
    '01511', '01751', '01972', '01971', '01973', '01974', '01975', '01976',
    '01131', '01261', '01371', '01381', '01831', '01911', '01921',
    
    // R√©gime agricole MSA (02)
    '02131', '02161', '02171', '02561',
    
    // Sections locales mutualistes (06)
    '06200',
    
    // R√©gimes sp√©ciaux (05)
    '05051',
    
    // MGEN (91)
    '91131', '91561', '91631', '91831',
    
    // Autres mutuelles (10)
    '10980'
  ];
  
  let success = 0;
  let failed = 0;
  
  for (const org of organismes) {
    try {
      console.log(`üì° R√©cup√©ration ${org}...`);
      await ensureCertificateLdapJS(org);
      success++;
      console.log(`‚úÖ ${org} r√©cup√©r√©\n`);
    } catch (error) {
      console.error(`‚ùå ${org} √©chec: ${error.message}\n`);
      failed++;
    }
    
    // Petite pause pour ne pas surcharger le serveur LDAP
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüìä R√âSUM√â:');
  console.log(`‚úÖ R√©ussis: ${success}`);
  console.log(`‚ùå √âchecs: ${failed}`);
  console.log(`üìú Total: ${success + failed}`);
  
  // Lister tous les certificats pr√©sents
  const pemFiles = fs.readdirSync('.')
    .filter(f => f.endsWith('.pem'))
    .sort();
  
  console.log('\nüìã Certificats disponibles:');
  pemFiles.forEach(f => console.log(`   - ${f}`));
}

// Ex√©cuter
fetchAllCertificates().catch(console.error);